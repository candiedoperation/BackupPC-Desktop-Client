/*
    BackupPC Desktop Client
    Copyright (C) 2021  Atheesh Thirumalairajan

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package tk.cyberphase.bpcdesktopclient;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.commons.configuration2.ex.ConfigurationException;

/**
 *
 * @author atheesh
 */
public class rsyncDaemonConfAdd extends javax.swing.JDialog {
    private rsyncDaemonConfParser confParser;
    
    public void register(callbackInterface callbackinterface) {
        callbackinterface.addedBackupPath();
    }
    
    public rsyncDaemonConfAdd(java.awt.Frame parent, boolean modal, String daemonConfLocation) {
        super(parent, modal);
        initComponents();
        this.setLocationRelativeTo(null); //Initialize the Window at Screen Center        
        
        try {
            confParser = new rsyncDaemonConfParser(daemonConfLocation);
        } catch (ConfigurationException | IOException ex) {
            Logger.getLogger(rsyncDaemonConfAdd.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void validateFields() {
        if (
                moduleName.getText().trim().equals("") ||
                backupPath.getText().trim().equals("") ||
                pathComment.getText().trim().equals("") ||
                strictMode.getText().trim().equals("") ||
                authorizedUsers.getText().trim().equals("") ||
                secretsFile.getText().trim().equals("") ||
                allowedHosts.getText().trim().equals("") ||
                readOnly.getText().trim().equals("") ||
                allowListing.getText().trim().equals("") ||
                charsetSetting.getText().trim().equals("")
        ) {
            addBackupLocation.setEnabled(false);
        } else {
            addBackupLocation.setEnabled(true);
        }
        
        try {
            if (confParser.isSectionNameInvalid(moduleName.getText()) == true) {
                addBackupLocation.setEnabled(false);
                addBackupLocation.setToolTipText("<html><b>Module Name is aldready taken</b> for another Path<br>Try another Name</html>");
            } else {
                addBackupLocation.setToolTipText(null);
            }
        } catch (IOException | ConfigurationException ex) {
            Logger.getLogger(rsyncDaemonConfAdd.class.getName()).log(Level.SEVERE, null, ex);
        }        
    }    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        cancelAddition = new javax.swing.JButton();
        addBackupLocation = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        moduleName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        backupPath = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        strictMode = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        authorizedUsers = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        secretsFile = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        allowedHosts = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        readOnly = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        allowListing = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        charsetSetting = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        pathComment = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Add a New Backup Location");
        setModal(true);
        setResizable(false);

        cancelAddition.setText("Cancel");
        cancelAddition.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancelAdditionMouseClicked(evt);
            }
        });
        cancelAddition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelAdditionActionPerformed(evt);
            }
        });

        addBackupLocation.setText("Add Backup Location");
        addBackupLocation.setEnabled(false);
        addBackupLocation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addBackupLocationMouseClicked(evt);
            }
        });
        addBackupLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBackupLocationActionPerformed(evt);
            }
        });

        jLabel1.setText("Module Name");

        moduleName.setToolTipText("rsyncd Module Name");
        moduleName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                moduleNameFocusLost(evt);
            }
        });
        moduleName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                moduleNameKeyReleased(evt);
            }
        });

        jLabel2.setText("Backup Path");

        backupPath.setText("/cygdrive/");
        backupPath.setToolTipText("<html>Add Backup Path Without Quotes <b>after /cygdrive/</b><br>Example: <b>/cygdrive/c/Documents and Settings</b></html>");
        backupPath.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                backupPathKeyReleased(evt);
            }
        });

        jLabel3.setText("Strict Mode");

        strictMode.setText("false");
        strictMode.setToolTipText("<html>The Default Setting of Strict Mode is false.<br>Refer to BackupPC rysnc Daemon's Documentation for Further Information<br><b>Do Not Change this setting if unsure</b></html>");
        strictMode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                strictModeKeyReleased(evt);
            }
        });

        jLabel4.setText("Authorized Users");

        authorizedUsers.setText("backuppc");
        authorizedUsers.setToolTipText("<html>The authorized users refers to the Users in the Preferences Tab<br>The default Username and Password can be Changed in the Preferences Tab</html>");
        authorizedUsers.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                authorizedUsersKeyReleased(evt);
            }
        });

        jLabel5.setText("Secrets File");
        jLabel5.setToolTipText("");

        secretsFile.setText("c:/rsyncd/rsyncd.secrets");
        secretsFile.setToolTipText("<html>Default Location of rsync Daemon Secret File<br><b>Do not change if unsure</b></html>");
        secretsFile.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                secretsFileKeyReleased(evt);
            }
        });

        jLabel6.setText("Allowed Hosts");
        jLabel6.setToolTipText("");

        allowedHosts.setToolTipText("<html>IP Address (or hostname) of the BackupPC Host (server).<br>Multiple hosts can be mentioned by seperating them using commas.<br><b>Example: 192.168.30.2, 192.168.30.3</b></html>");
        allowedHosts.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                allowedHostsKeyReleased(evt);
            }
        });

        jLabel7.setText("Read Only");
        jLabel7.setToolTipText("");

        readOnly.setText("true");
        readOnly.setToolTipText("Specify whether this folder is Read Only or not (for the BackupPC Server)");
        readOnly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readOnlyActionPerformed(evt);
            }
        });
        readOnly.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                readOnlyKeyReleased(evt);
            }
        });

        jLabel8.setText("Allow Listing");
        jLabel8.setToolTipText("");

        allowListing.setText("true");
        allowListing.setToolTipText("<html>The Default Setting is to provide the list of all files in the Directory to the BackupPC Host (server)<br><b>Do Not Change this setting if unsure</b></html>");
        allowListing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allowListingActionPerformed(evt);
            }
        });
        allowListing.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                allowListingKeyReleased(evt);
            }
        });

        jLabel9.setText("Charset");
        jLabel9.setToolTipText("");

        charsetSetting.setText("utf-8");
        charsetSetting.setToolTipText("<html>The Default Charset Setting is utf-8<br><b>Do Not Change this setting if unsure</b></html>");
        charsetSetting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                charsetSettingActionPerformed(evt);
            }
        });
        charsetSetting.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                charsetSettingKeyReleased(evt);
            }
        });

        jLabel10.setText("Comment");

        pathComment.setToolTipText("Add Comments about for Future Reference");
        pathComment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                pathCommentKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(authorizedUsers)
                            .addComponent(secretsFile, javax.swing.GroupLayout.DEFAULT_SIZE, 509, Short.MAX_VALUE)
                            .addComponent(allowedHosts, javax.swing.GroupLayout.DEFAULT_SIZE, 509, Short.MAX_VALUE)
                            .addComponent(readOnly, javax.swing.GroupLayout.DEFAULT_SIZE, 509, Short.MAX_VALUE)
                            .addComponent(allowListing, javax.swing.GroupLayout.DEFAULT_SIZE, 509, Short.MAX_VALUE)
                            .addComponent(charsetSetting, javax.swing.GroupLayout.DEFAULT_SIZE, 509, Short.MAX_VALUE)
                            .addComponent(strictMode)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 418, Short.MAX_VALUE)
                        .addComponent(cancelAddition)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addBackupLocation))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(backupPath)
                            .addComponent(moduleName)
                            .addComponent(pathComment))))
                .addGap(20, 20, 20))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(moduleName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(backupPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(pathComment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(strictMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(authorizedUsers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(secretsFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(allowedHosts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(readOnly, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(allowListing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(charsetSetting, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addBackupLocation)
                    .addComponent(cancelAddition))
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelAdditionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelAdditionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cancelAdditionActionPerformed

    private void addBackupLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBackupLocationActionPerformed
        // TODO add your handling code here:
        Map<String, String> configFieldData = new HashMap<>();
        configFieldData.put("module-name", moduleName.getText());
        configFieldData.put("path", backupPath.getText());
        configFieldData.put("comment", pathComment.getText());
        configFieldData.put("strict modes", strictMode.getText());
        configFieldData.put("auth users", authorizedUsers.getText());
        configFieldData.put("secrets file", secretsFile.getText());
        configFieldData.put("hosts allow", allowedHosts.getText());
        configFieldData.put("read only", readOnly.getText());
        configFieldData.put("list", allowListing.getText());
        configFieldData.put("charset", charsetSetting.getText());

        rsyncDaemonConfParser.addConfigHeader(configFieldData);
        callbackInterface callbackinterface = new mainInterface();
        register(callbackinterface);
        
        this.dispose();
    }//GEN-LAST:event_addBackupLocationActionPerformed

    private void cancelAdditionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelAdditionMouseClicked
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_cancelAdditionMouseClicked

    private void readOnlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readOnlyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_readOnlyActionPerformed

    private void allowListingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allowListingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_allowListingActionPerformed

    private void charsetSettingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_charsetSettingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_charsetSettingActionPerformed

    private void moduleNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_moduleNameKeyReleased
        // TODO add your handling code here:
        validateFields();
    }//GEN-LAST:event_moduleNameKeyReleased

    private void backupPathKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_backupPathKeyReleased
        // TODO add your handling code here:
        validateFields();
    }//GEN-LAST:event_backupPathKeyReleased

    private void strictModeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_strictModeKeyReleased
        // TODO add your handling code here:
        validateFields();
    }//GEN-LAST:event_strictModeKeyReleased

    private void authorizedUsersKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_authorizedUsersKeyReleased
        // TODO add your handling code here:
        validateFields();
    }//GEN-LAST:event_authorizedUsersKeyReleased

    private void secretsFileKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_secretsFileKeyReleased
        // TODO add your handling code here:
        validateFields();
    }//GEN-LAST:event_secretsFileKeyReleased

    private void allowListingKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_allowListingKeyReleased
        // TODO add your handling code here:
        validateFields();
    }//GEN-LAST:event_allowListingKeyReleased

    private void charsetSettingKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_charsetSettingKeyReleased
        // TODO add your handling code here:
        validateFields();
    }//GEN-LAST:event_charsetSettingKeyReleased

    private void readOnlyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_readOnlyKeyReleased
        // TODO add your handling code here:
        validateFields();
    }//GEN-LAST:event_readOnlyKeyReleased

    private void allowedHostsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_allowedHostsKeyReleased
        // TODO add your handling code here:
        validateFields();
    }//GEN-LAST:event_allowedHostsKeyReleased

    private void pathCommentKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pathCommentKeyReleased
        // TODO add your handling code here:
        validateFields();
    }//GEN-LAST:event_pathCommentKeyReleased

    private void addBackupLocationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addBackupLocationMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_addBackupLocationMouseClicked

    private void moduleNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_moduleNameFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_moduleNameFocusLost
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(rsyncDaemonConfAdd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(rsyncDaemonConfAdd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(rsyncDaemonConfAdd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(rsyncDaemonConfAdd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    rsyncDaemonConfAdd dialog = new rsyncDaemonConfAdd(new javax.swing.JFrame(), true, new bpcConfigParser().bpcConfigData.get("rsyncd_conf_path"));
                    dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                        @Override
                        public void windowClosing(java.awt.event.WindowEvent e) {
                            System.exit(0);
                        }
                    });
                    dialog.setVisible(true);
                } catch (ConfigurationException ex) {
                    Logger.getLogger(rsyncDaemonConfAdd.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(rsyncDaemonConfAdd.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBackupLocation;
    private javax.swing.JTextField allowListing;
    private javax.swing.JTextField allowedHosts;
    private javax.swing.JTextField authorizedUsers;
    private javax.swing.JTextField backupPath;
    private javax.swing.JButton cancelAddition;
    private javax.swing.JTextField charsetSetting;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField moduleName;
    private javax.swing.JTextField pathComment;
    private javax.swing.JTextField readOnly;
    private javax.swing.JTextField secretsFile;
    private javax.swing.JTextField strictMode;
    // End of variables declaration//GEN-END:variables
}
